name: Deploy AWS Serverless

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
   
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301	
    
    - name: Package
      run: |
        cd TemplateBackend
        dotnet new tool-manifest
        dotnet tool install Amazon.Lambda.Tools
        dotnet lambda package
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
          name: deploy-package.zip
          path: TemplateBackend/bin/serverless/
    
    - name: Install dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --no-restore --verbosity normal
	  
    - name: Publish
      run: dotnet publish -c Release -o '${{ github.workspace }}/out'
	  
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
          name: deploy-package.zip
          path: TemplateBackend/bin/serverless/
  deploy:
    name: deploy
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Download artifact  
      uses: actions/download-artifact@v2
      with:
        name: deploy-package.zip
        path: TemplateBackend/bin/serverless/

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: TemplateBackend/bin/serverless

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Deploy
      run: |
        cd src/LinkManager.Api.GraphQL
        npm install -g serverless
        serverless deploy --stage production
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
